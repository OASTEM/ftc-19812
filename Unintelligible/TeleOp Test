package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;

/*
 * This file contains an example of a Linear "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When a selection is made from the menu, the corresponding OpMode is executed.
 *
 * This particular OpMode illustrates driving a 4-motor Omni-Directional (or Holonomic) robot.
 * This code will work with either a Mecanum-Drive or an X-Drive train.
 * Both of these drives are illustrated at https://gm0.org/en/latest/docs/robot-design/drivetrains/holonomic.html
 * Note that a Mecanum drive must display an X roller-pattern when viewed from above.
 *
 * Also note that it is critical to set the correct rotation direction for each motor.  See details below.
 *
 * Holonomic drives provide the ability for the robot to move in three axes (directions) simultaneously.
 * Each motion axis is controlled by one Joystick axis.
 *
 * 1) Axial:    Driving forward and backward               Left-joystick Forward/Backward
 * 2) Lateral:  Strafing right and left                     Left-joystick Right and Left
 * 3) Yaw:      Rotating Clockwise and counter clockwise    Right-joystick Right and Left
 *
 * This code is written assuming that the right-side motors need to be reversed for the robot to drive forward.
 * When you first test your robot, if it moves backward when you push the left stick forward, then you must flip
 * the direction of all 4 motors (see code below).
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */
@Autonomous(name="MeetZero", group="Linear OpMode")

public class TeleOpTEst extends LinearOpMode {

    // Declare OpMode members for each of the 4 motors.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor front_left = null;
    private DcMotor front_right = null;
    private DcMotor back_left = null;
    private DcMotor back_right = null;
    
    public void input(int target)
    {
        front_left.setTargetPosition(target);
        front_right.setTargetPosition(target);
        back_left.setTargetPosition(target);
        back_right.setTargetPosition(target);
        
        front_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        front_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        front_left.setPower(0.5);
        front_right.setPower(0.5);
        back_left.setPower(0.5);
        back_right.setPower(0.5);
    }
    public void left(int target)
    {
        front_left.setTargetPosition(-target);
        front_right.setTargetPosition(target);
        back_left.setTargetPosition(target);
        back_right.setTargetPosition(-target);
        
        front_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        front_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        front_left.setPower(-0.5);
        front_right.setPower(0.5);
        back_left.setPower(0.5);
        back_right.setPower(-0.5);
    }
    public void right(int target)
    {
        front_left.setTargetPosition(target);
        front_right.setTargetPosition(-target);
        back_left.setTargetPosition(-target);
        back_right.setTargetPosition(target);
        
        front_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        front_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        front_left.setPower(0.5);
        front_right.setPower(0.5);
        back_left.setPower(0.5);
        back_right.setPower(0.5);
    }
    public void back(int target)
    {
        front_left.setTargetPosition(-target);
        front_right.setTargetPosition(-target);
        back_left.setTargetPosition(-target);
        back_right.setTargetPosition(-target);
        
        front_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        front_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        back_right.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        front_left.setPower(-0.5);
        front_right.setPower(-0.5);
        back_left.setPower(-0.5);
        back_right.setPower(-0.5);
    }

    @Override
    public void runOpMode() {

        // Initialize the hardware variables. Note that the strings used here must correspond
        // to the names assigned during the robot configuration step on the DS or RC devices.
        front_left = hardwareMap.get(DcMotor.class, "fLeft");
        front_right = hardwareMap.get(DcMotor.class, "fRight");
        back_left = hardwareMap.get(DcMotor.class, "bLeft");
        back_right = hardwareMap.get(DcMotor.class, "bRight");

        back_left.setDirection(DcMotor.Direction.REVERSE);
        front_right.setDirection(DcMotor.Direction.REVERSE);

        // Wait for the game to start (driver presses PLAY)
        telemetry.addData("Status", "Initialized");
        telemetry.update();
boolean thing=true;
        waitForStart();
        

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            runtime.reset();
        if(thing)
        {
            runtime.reset();
           while(runtime.seconds()<9.0)
           {
            front_left.setPower(0.2);
            front_right.setPower(-0.2);
            back_left.setPower(-0.23);
            back_right.setPower(0.2);
           }
           thing=false;
        }
        front_left.setPower(0.0);
            front_right.setPower(-0.0);
            back_left.setPower(-0.0);
            back_right.setPower(0.0);
            
            // Show the elapsed game time and wheel power.
        }
    }}
